box:
 id: node:latest
 ports:
   - "3000"

dev:
  steps:
    - npm-install
    - internal/watch:
        code: npm start
        reload: false
  
build:
  steps:
    - npm-install
    - script:
      name: build source
      code: npm run build
    - script:
      name: copy artifacts
      code: |
        cp -a ./build ${WERCKER_OUTPUT_DIR}/build
        cp -a ./kubernetes ${WERCKER_OUTPUT_DIR}/kubernetes
        ls -l ${WERCKER_OUTPUT_DIR}

docker-push:
  box:
    id: node:latest
  steps:
    - script:
      name: copy binaries to /usr/app/src
      code: |
        mkdir -p /usr/app/src
        cp -r ${WERCKER_ROOT}/ /usr/app/src/
    - script:
        name: echo docker tag
        code: |
          echo "DOCKER IMAGE:TAG"
          echo "hub.docker.com/schmidtp0740/smnetwork_backend:${WERCKER_GIT_BRANCH}-${WERCKER_GIT_COMMIT}"
    - script:
        name: install serve
        code: |
          npm install -g serve
    # Pushing to a docker hub repository
    # For other docker repository refer to this doc: http://devcenter.wercker.com/docs/containers/pushing-containers
    - internal/docker-push:
        repository: schmidtp0740/smnetwork_frontend
        registry: https://registry.hub.docker.com/v2
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        tag: ${WERCKER_GIT_BRANCH}-${WERCKER_GIT_COMMIT}
        cmd: serve -s /usr/app/src/build
        ports: "5000"

deploy:
  box:
    id: node:latest

  steps:
    - script:
        name: debug
        code: |
          echo $WERCKER_ROOT
          ls -l $WERCKER_ROOT
    - bash-template:
        cwd: $WERCKER_ROOT/kubernetes
    - script:
        name: Remove template files
        cwd: $WERCKER_ROOT/kubernetes
        code: |
          rm *.template.yaml
    - create-file:
        name: Create admin.pem
        cwd: $WERCKER_ROOT/kubernetes
        filename: admin.pem
        content: $KUBE_ADMIN
    - create-file:
        name: Create admin-key.pem
        cwd: $WERCKER_ROOT/kubernetes
        filename: admin-key.pem
        content: $KUBE_ADMIN_KEY
    - kubectl:
        cwd: $WERCKER_ROOT/kubernetes
        server: ${KUBE_ENDPOINT}
        client-certificate: admin.pem
        client-key: admin-key.pem
        insecure-skip-tls-verify: true
        command: apply -f .
    - script:
        name: cleanup
        cwd: $WERCKER_ROOT/kubernetes
        code: rm -rf *.pem deployment.yaml